//
// Module mopshub_readout_lib.elink_interface_tra_sm.fsm
//
// Created:
//          by - dcs.dcs (localhost)
//          at - 16:40:05 05/03/24
//
// Generated by Mentor Graphics' HDL Designer(TM) 2019.4 (Build 4)
//
`resetall
`timescale 1ns/10ps
module elink_interface_tra_sm( 
   // Port Declarations
   input   wire           abort,                  // Upon receiving a reset message on the CANbus. FSM goes into a known state
   input   wire           clk,                    // posedge
   input   wire           endwait, 
   input   wire           rst,                    // synchronous low active
   input   wire           start_write_elink_dbg, 
   input   wire           timeoutrst,             // timeout reset signal to the state machine in case bridge controller is not respoding for a specified time
   input   wire           tx_efifo_full, 
   output  reg     [4:0]  addr_write,             // request to caninterface block
   output  reg            buffer_rec_en, 
   output  reg            cs_ewrite, 
   output  reg            dbg_rec_mode, 
   output  reg            end_write_elink, 
   output  reg            end_write_elink_dbg, 
   output  reg            entimeout,              // enable for timeout reset counter 
   output  reg            irq_elink_rec, 
   output  reg            rst_mopshub_mode, 
   output  reg            start_read_eth_fifo, 
   output  reg     [7:0]  statedeb
);

//tmrg default triplicate
//tmrg tmr_error false
// Internal Declarations


// Declare any pre-registered internal signals
reg [4:0] addr_write_cld;

// Module Declarations

// State encoding
parameter 
          ST_waittoact        = 5'd0,
          ST_reset            = 5'd1,
          ST_end_write_en_DBG = 5'd2,
          store_WB0_DBG       = 5'd3,
          ST_wait_can_rq_DBG  = 5'd4,
          st_write_data_DBG   = 5'd5,
          store_SOP_DBG       = 5'd6,
          Store_Eop_DBG       = 5'd7,
          WB0_DBG             = 5'd8,
          W_SOP_DBG           = 5'd9,
          W_Eop_DBG           = 5'd10,
          Store_Comma_DBG     = 5'd11,
          store_WB0_rst       = 5'd12,
          store_SOP_rst       = 5'd13,
          store_Eop_rst       = 5'd14,
          WB0_rst             = 5'd15,
          W_SOP_rst           = 5'd16,
          W_Eop_rst           = 5'd17,
          ST_endwait          = 5'd18,
          W_Comma_DBG         = 5'd19,
          end_Write_rst       = 5'd20,
          ST_wait_rq_rst      = 5'd21,
          W_Comma_rst1        = 5'd22,
          store_Comma_rst     = 5'd23,
          store_Comma_rst3    = 5'd24,
          W_Comma_rst4        = 5'd25;

reg [4:0] current_state, next_state;

//-----------------------------------------------------------------
// Next State Block for machine csm
//-----------------------------------------------------------------
always @(
   addr_write_cld, 
   current_state, 
   rst, 
   start_write_elink_dbg, 
   tx_efifo_full
)
begin : next_state_block_proc
   case (current_state) 
      ST_waittoact: begin
         if (start_write_elink_dbg == 1)
            next_state = st_write_data_DBG;
         else
            next_state = ST_waittoact;
      end
      ST_reset: begin
         if (rst == 1)
            next_state = W_SOP_rst;
         else
            next_state = ST_reset;
      end
      ST_end_write_en_DBG: begin
         next_state = ST_waittoact;
      end
      store_WB0_DBG: begin
         if (addr_write_cld == 5'hC)
            next_state = W_Eop_DBG;
         else
            next_state = WB0_DBG;
      end
      ST_wait_can_rq_DBG: begin
         if (!tx_efifo_full)
            next_state = ST_end_write_en_DBG;
         else
            next_state = ST_wait_can_rq_DBG;
      end
      st_write_data_DBG: begin
         next_state = W_SOP_DBG;
      end
      store_SOP_DBG: begin
         next_state = WB0_DBG;
      end
      Store_Eop_DBG: begin
         next_state = W_Comma_DBG;
      end
      WB0_DBG: begin
         if (!tx_efifo_full)
            next_state = store_WB0_DBG;
         else
            next_state = WB0_DBG;
      end
      W_SOP_DBG: begin
         if (!tx_efifo_full)
            next_state = store_SOP_DBG;
         else
            next_state = W_SOP_DBG;
      end
      W_Eop_DBG: begin
         if (!tx_efifo_full)
            next_state = Store_Eop_DBG;
         else
            next_state = W_Eop_DBG;
      end
      Store_Comma_DBG: begin
         if (!tx_efifo_full)
            next_state = ST_wait_can_rq_DBG;
         else
            next_state = Store_Comma_DBG;
      end
      store_WB0_rst: begin
         if (addr_write_cld == 5'hC)
            next_state = W_Eop_rst;
         else
            next_state = WB0_rst;
      end
      store_SOP_rst: begin
         next_state = WB0_rst;
      end
      store_Eop_rst: begin
         next_state = W_Comma_rst1;
      end
      WB0_rst: begin
         if (!tx_efifo_full)
            next_state = store_WB0_rst;
         else
            next_state = WB0_rst;
      end
      W_SOP_rst: begin
         if (!tx_efifo_full)
            next_state = store_SOP_rst;
         else
            next_state = W_SOP_rst;
      end
      W_Eop_rst: begin
         if (!tx_efifo_full)
            next_state = store_Eop_rst;
         else
            next_state = W_Eop_rst;
      end
      ST_endwait: begin
         next_state = ST_waittoact;
      end
      W_Comma_DBG: begin
         if (!tx_efifo_full)
            next_state = Store_Comma_DBG;
         else
            next_state = W_Comma_DBG;
      end
      end_Write_rst: begin
         next_state = ST_waittoact;
      end
      ST_wait_rq_rst: begin
         next_state = end_Write_rst;
      end
      W_Comma_rst1: begin
         if (!tx_efifo_full)
            next_state = store_Comma_rst;
         else
            next_state = W_Comma_rst1;
      end
      store_Comma_rst: begin
         next_state = W_Comma_rst4;
      end
      store_Comma_rst3: begin
         next_state = ST_wait_rq_rst;
      end
      W_Comma_rst4: begin
         if (!tx_efifo_full)
            next_state = store_Comma_rst3;
         else
            next_state = W_Comma_rst4;
      end
      default: 
         next_state = ST_reset;
   endcase
end // Next State Block

//-----------------------------------------------------------------
// Output Block for machine csm
//-----------------------------------------------------------------
always @(
   current_state
)
begin : output_block_proc
   // Default Assignment
   buffer_rec_en = 0;
   cs_ewrite = 0;
   dbg_rec_mode = 0;
   end_write_elink = 0;
   end_write_elink_dbg = 0;
   entimeout = 1;
   irq_elink_rec = 0;
   rst_mopshub_mode = 0;
   start_read_eth_fifo = 0;

   // Combined Actions
   case (current_state) 
      ST_waittoact: begin
         entimeout = 0 ;
      end
      ST_reset: begin
         entimeout = 0 ;
      end
      ST_end_write_en_DBG: begin
         end_write_elink_dbg =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB0_DBG: begin
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      ST_wait_can_rq_DBG: begin
         irq_elink_rec =1;
         dbg_rec_mode = 1'b1;
      end
      st_write_data_DBG: begin
         dbg_rec_mode = 1'b1;
         start_read_eth_fifo =1'b1;
      end
      store_SOP_DBG: begin
         cs_ewrite =1;
         dbg_rec_mode = 1'b1;
      end
      Store_Eop_DBG: begin
         cs_ewrite =1;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      WB0_DBG: begin
         dbg_rec_mode = 1'b1;
      end
      W_SOP_DBG: begin
         dbg_rec_mode = 1'b1;
      end
      W_Eop_DBG: begin
         dbg_rec_mode = 1'b1;
      end
      Store_Comma_DBG: begin
         cs_ewrite =1;
         buffer_rec_en =1;
         dbg_rec_mode = 1'b1;
      end
      store_WB0_rst: begin
         cs_ewrite = 1 ;
         buffer_rec_en =1;
         rst_mopshub_mode=1;
      end
      store_SOP_rst: begin
         cs_ewrite =1;
         rst_mopshub_mode=1;
      end
      store_Eop_rst: begin
         cs_ewrite =1;
         rst_mopshub_mode=1;
      end
      WB0_rst: begin
         rst_mopshub_mode=1;
      end
      W_SOP_rst: begin
         rst_mopshub_mode=1;
      end
      W_Eop_rst: begin
         rst_mopshub_mode=1;
      end
      W_Comma_DBG: begin
         dbg_rec_mode = 1'b1;
      end
      end_Write_rst: begin
         rst_mopshub_mode=1;
         end_write_elink =1;
      end
      ST_wait_rq_rst: begin
         irq_elink_rec =1;
         rst_mopshub_mode=1;
      end
      W_Comma_rst1: begin
         rst_mopshub_mode=1;
      end
      store_Comma_rst: begin
         cs_ewrite = 1 ;
         rst_mopshub_mode=1;
      end
      store_Comma_rst3: begin
         cs_ewrite = 1 ;
         rst_mopshub_mode=1;
      end
      W_Comma_rst4: begin
         rst_mopshub_mode=1;
      end
   endcase
end // Output Block

//-----------------------------------------------------------------
// Clocked Block for machine csm
//-----------------------------------------------------------------
always @(
   posedge clk
) 
begin : clocked_block_proc
   if (!rst) begin
      current_state <= ST_reset;
   end
   else if (timeoutrst) begin
      current_state <= ST_reset;
   end
   else if (abort) begin
      current_state <= ST_endwait;
   end
   else if (endwait) begin
      current_state <= ST_reset;
   end
   else 
   begin
      current_state <= next_state;

      // Combined Actions
      case (current_state) 
         ST_reset: begin
            addr_write_cld <=1'b0;
         end
         store_WB0_DBG: begin
            addr_write_cld <= addr_write_cld ;
         end
         ST_wait_can_rq_DBG: begin
            addr_write_cld = 5'b0;
         end
         store_SOP_DBG: begin
            addr_write_cld = 5'h1 ;
         end
         Store_Eop_DBG: begin
            addr_write_cld = 5'hC;
         end
         WB0_DBG: begin
            addr_write_cld <= addr_write_cld +1;
         end
         W_SOP_DBG: begin
            addr_write_cld = 5'h1 ;
         end
         W_Eop_DBG: begin
            addr_write_cld = 5'hC;
         end
         Store_Comma_DBG: begin
            addr_write_cld = 5'h0;
         end
         store_WB0_rst: begin
            addr_write_cld <=addr_write_cld ;
         end
         store_SOP_rst: begin
            addr_write_cld = 5'h1 ;
         end
         store_Eop_rst: begin
            addr_write_cld = 5'hC;
         end
         WB0_rst: begin
            addr_write_cld = addr_write_cld +1;
         end
         W_SOP_rst: begin
            addr_write_cld = 5'h1 ;
         end
         W_Eop_rst: begin
            addr_write_cld = 5'hC;
         end
         W_Comma_DBG: begin
            addr_write_cld = 5'h0;
         end
         W_Comma_rst1: begin
            addr_write_cld = 5'h0;
         end
         store_Comma_rst: begin
            addr_write_cld = 5'h0;
         end
         store_Comma_rst3: begin
            addr_write_cld = 5'h0;
         end
         W_Comma_rst4: begin
            addr_write_cld = 5'h0;
         end
      endcase
   end
end // Clocked Block

// State-As-Output assignment
always @(current_state)
begin
   statedeb = 8'b0;
   statedeb[4:0] = current_state;
end

// Concurrent Statements
// Clocked output assignments
always @(
   addr_write_cld
)
begin : clocked_output_proc
   addr_write = addr_write_cld;
end
endmodule // elink_interface_tra_sm
